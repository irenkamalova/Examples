#include <iostream>

using namespace std;

class A {
    int numberA;
public:

    A() {
        numberA = 0;
        cout << "Default constructor A" << endl;
    }

    A(int n) {
        numberA = n;
        cout << "Constructor A" << endl;
    }

    ~A() {
        cout << "Destructor A " << numberA << endl;
    }

    void showA() {
        cout << "A is " << numberA << endl;
    };
};

class B : public A {
    int numberB;
public:

    B() {
        numberB = 0;
        cout << "Default constructor B" << endl;
    }

    B(int n) : A (n) {
        numberB = n;
        cout << "Construcor B to A 1" << endl;
    }

    B(int nB, int nA) : A (nA) {
        numberB = nB;
        cout << "Construcor B to A 2" << endl;
    }

    ~B() {
        cout << "Destructor B " << numberB << endl;
    }

    void showB() {
        cout << "B is " << numberB << endl;
    };
};

class D : public B {
    int numD;
public:

    D() {
        numD = 0;
        cout << "Default constructor D" << endl;
    }

    D(int n) : B(n) {
        numD = n;
        cout << "Construcor D to B 1" << endl;
    }

    D(int nD, int nB) : B(nB) {
        numD = nD;
        cout << "Construcor D to B 2" << endl;
    }

    D(int nD, int nB, int nA) : B(nB, nA) {
        numD = nD;
        cout << "Construcor D to B 3" << endl;
    }

    ~D() {
        cout << "Destructor D " << numD << endl;
    }
};


int main() {
    D object1;
    object1.showA();

    D object2(1);
    object2.showA();

    D object3(2, 2);
    object3.showA();

    D object4(3, 3, 3);
    object4.showA();

    return 0;
}
